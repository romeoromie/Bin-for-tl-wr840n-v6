name: OpenWrt Image Build (TL-WR840N v6.2)

# Trigger the workflow manually from the GitHub Actions tab
on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: 'OpenWrt Release (e.g., 22.03.6, 23.05.0)'
        required: true
        default: '22.03.6' # Always check latest stable for ramips/mt76x8

# Define environment variables used in the build steps
env:
  # The specific target for the TL-WR840N v6.x
  TARGET_PROFILE: tplink_tl-wr840n-v6 
  # Minimal packages + nodogsplash, excluding LuCI and extras
  PACKAGES: "nodogsplash wpad-basic-wolfssl -opkg -ppp -pppoe -luci -luci-base -uhttpd -rpcd -odhcp6c -odhcpd-ipv6only"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 1. Download the ImageBuilder for the specified version and target
      - name: Download ImageBuilder
        run: |
          VERSION="${{ github.event.inputs.openwrt_version }}"
          BUILDER_URL="https://downloads.openwrt.org/releases/${VERSION}/targets/ramips/mt76x8/openwrt-imagebuilder-${VERSION}-ramips-mt76x8.Linux-x86_64.tar.xz"
          wget $BUILDER_URL -O imagebuilder.tar.xz
          tar -xf imagebuilder.tar.xz
          BUILDER_DIR=$(tar -tf imagebuilder.tar.xz | head -1 | cut -f1 -d"/")
          echo "BUILDER_DIR=$BUILDER_DIR" >> $GITHUB_ENV
          
      # 2. Run the ImageBuilder build process
      - name: Build Minimal OpenWrt Image
        run: |
          cd ${{ env.BUILDER_DIR }}
          make image PROFILE=${{ env.TARGET_PROFILE }} PACKAGES="${{ env.PACKAGES }}"
        
      # 3. Rename the output file for a clean release name
      - name: Prepare Files for Release
        run: |
          cd ${{ env.BUILDER_DIR }}/bin/targets/ramips/mt76x8
          # Locate the sysupgrade file and rename it
          SYSUPGRADE_FILE=$(ls *-sysupgrade.bin)
          NEW_NAME="openwrt-${{ env.TARGET_PROFILE }}-${{ github.event.inputs.openwrt_version }}-nodogsplash-sysupgrade.bin"
          mv $SYSUPGRADE_FILE $NEW_NAME
          echo "FIRMWARE_FILE=$NEW_NAME" >> $GITHUB_ENV
          
      # 4. Upload the built firmware as an Artifact (for temporary access)
      - name: Upload Firmware Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FIRMWARE_FILE }}
          path: ${{ env.BUILDER_DIR }}/bin/targets/ramips/mt76x8/${{ env.FIRMWARE_FILE }}

      # 5. Create a GitHub Release and attach the firmware file
      - name: Create Release and Upload Firmware
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.openwrt_version }}
          name: Hotspot Firmware v${{ github.event.inputs.openwrt_version }}
          body: |
            Minimal OpenWrt build for TP-Link TL-WR840N v6.2.
            - Includes: nodogsplash, dropbear (SSH), dnsmasq (DHCP/DNS).
            - Excludes: LuCI web interface, opkg, ppp/pppoe.
            - Target Profile: ${{ env.TARGET_PROFILE }}
            - OpenWrt Version: ${{ github.event.inputs.openwrt_version }}
          files: |
            ${{ env.BUILDER_DIR }}/bin/targets/ramips/mt76x8/${{ env.FIRMWARE_FILE }}
        env:
          # This token is required for creating a release
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload firmware
      uses: actions/upload-artifact@v4
      with:
        name: firmware
        path: openwrt/bin/targets/
